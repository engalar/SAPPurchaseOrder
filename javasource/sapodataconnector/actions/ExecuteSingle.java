// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package sapodataconnector.actions;

import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.impl.client.CloseableHttpClient;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.MendixException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.thirdparty.org.json.JSONObject;
import com.mendix.webui.CustomJavaAction;
import sapodataconnector.proxies.constants.Constants;
import sapodataconnector.utils.JsonSerializer;
import sapodataconnector.utils.ODataClientBuilder;
import sapodataconnector.utils.ODataRequestBuilder;
import sapodataconnector.utils.ODataResponseHandler;
import sapodataconnector.utils.ExpectedHttpResultOptional;
import sapodataconnector.utils.HttpRequest;
import sapodataconnector.utils.ToMendixSerializer;

public class ExecuteSingle extends CustomJavaAction<IMendixObject>
{
	private java.lang.String responseType;
	private IMendixObject __destination;
	private sapodataconnector.proxies.Destination destination;
	private java.lang.String url;
	private sapodataconnector.proxies.HttpMethod httpMethod;
	private IMendixObject __functionParameters;
	private sapodataconnector.proxies.FunctionParameters functionParameters;
	private IMendixObject __requestParameters;
	private sapodataconnector.proxies.RequestParams requestParameters;

	public ExecuteSingle(IContext context, java.lang.String responseType, IMendixObject destination, java.lang.String url, java.lang.String httpMethod, IMendixObject functionParameters, IMendixObject requestParameters)
	{
		super(context);
		this.responseType = responseType;
		this.__destination = destination;
		this.url = url;
		this.httpMethod = httpMethod == null ? null : sapodataconnector.proxies.HttpMethod.valueOf(httpMethod);
		this.__functionParameters = functionParameters;
		this.__requestParameters = requestParameters;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.destination = this.__destination == null ? null : sapodataconnector.proxies.Destination.initialize(getContext(), __destination);

		this.functionParameters = this.__functionParameters == null ? null : sapodataconnector.proxies.FunctionParameters.initialize(getContext(), __functionParameters);

		this.requestParameters = this.__requestParameters == null ? null : sapodataconnector.proxies.RequestParams.initialize(getContext(), __requestParameters);

		// BEGIN USER CODE
		if(LOGGER.isDebugEnabled()) {
			LOGGER.debug(new StringBuilder(getContext().getSession().getId().toString())
					.append("|")
					.append(httpMethod)
					.append("|ExecuteSingle, url: ")
					.append(url)
					.toString());
		}

		String bodyContent = null;
		String parameterizedUrl = url;
		if (httpMethod.equals(sapodataconnector.proxies.HttpMethod.POST)
				&& (functionParameters != null && !functionParameters.getpostParameterInline())) {
			LOGGER.info("ExecuteSingle :: Prepare bodyContent");
			bodyContent = JsonSerializer.writeMendixObjectToJson(getContext(), __functionParameters, false).toString();
		} else {
			LOGGER.info("ExecuteSingle :: Prepare Parameterized URL");
			parameterizedUrl = HttpRequest.setGetParameters(getContext(), url, functionParameters);
		}

		ODataRequestBuilder.Builder builder = ODataRequestBuilder.builder();
		if (sapodataconnector.proxies.HttpMethod.POST.equals(httpMethod)) {
			builder.post(destination, parameterizedUrl)
				.setBodyContent(bodyContent);
		} else if (sapodataconnector.proxies.HttpMethod.GET.equals(httpMethod)) {
			builder.get(destination, parameterizedUrl);
		}
		
		HttpRequestBase httpRequest = builder.setContext(getContext())
			.setRequestHeader(requestParameters)
			.setBodyContent(bodyContent)
			.build();

		String response = null;
		try (final CloseableHttpClient httpClient = ODataClientBuilder.builder()
				.setContext(getContext())
				.setRequestParameters(requestParameters)
				.setDestination(destination)
				.build()){

			response = httpClient.execute(httpRequest, new ODataResponseHandler(httpMethod.toString(), LOGGER, getContext(),
					ExpectedHttpResultOptional.ofNullable(requestParameters).getExpectedHttpResult()));
		}
		
		// response handling
		final JSONObject resultObjectD = new JSONObject(response).getJSONObject("d");
		if (resultObjectD == null) {
			throw new MendixException("Expecting exactly one result, got nothing");
		}
		IMendixObject target = Core.instantiate(getContext(), responseType);
		// check result has on property, use that
		if (resultObjectD.length() != 1) {
			if (resultObjectD.has("__metadata")) {
				final JSONObject ResponseMetadata = resultObjectD.getJSONObject("__metadata");
				if (ResponseMetadata.has("type")) {
					if (ResponseMetadata.getString("type").contains("Collection(")) {
						throw new MendixException(
								"Expecting one result but according to metadata we have a collection of results"
										+ resultObjectD.toString());
					}
				} else {
					LOGGER.warn(
							"The received OData response in executeSingle doesn't have any declared type in the __metadata, we can not verify if the rceived response is in valid format.\n"
									+ resultObjectD.toString());
				}
			} else {
				LOGGER.warn(
						"The received OData response in executeSingle doesn't have any __metadata, we can not verify if the rceived response is in valid format.\n"
								+ resultObjectD.toString());
			}
			ToMendixSerializer.updateMendixObject(getContext(), resultObjectD, target);
		}else {
			JSONObject resultFromFunction = resultObjectD.getJSONObject(resultObjectD.keys().next());
			ToMendixSerializer.updateMendixObject(getContext(), resultFromFunction, target);
		}
		return target;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ExecuteSingle";
	}

	// BEGIN EXTRA CODE
	private static final ILogNode LOGGER = Core.getLogger(Constants.getLogNode());
	// END EXTRA CODE
}
