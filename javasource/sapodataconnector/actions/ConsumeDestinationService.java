// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package sapodataconnector.actions;

import java.io.IOException;
import java.io.StringReader;
import java.util.Base64;
import javax.json.Json;
import javax.json.stream.JsonParser;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import sapodataconnector.proxies.constants.Constants;
import sapodataconnector.utils.AppEnvironmentSettings;
import sapodataconnector.utils.HttpLoggingInterceptor;

public class ConsumeDestinationService extends CustomJavaAction<java.lang.String>
{
	private java.lang.String Name;

	public ConsumeDestinationService(IContext context, java.lang.String Name)
	{
		super(context);
		this.Name = Name;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
	    String authenticatedUserToken = getUserXSUAAToken(getContext()); // Fetching XSUAA token from database using currentUser
		String authenticationEndpoint = AppEnvironmentSettings.getAuthenticationEndpoint() + "/oauth/token";
	    String destinationClientId = AppEnvironmentSettings.getDestinationClientId();
	    String destinationClientSecret = AppEnvironmentSettings.getDestinationClientSecret();
	    String destinationEndpoint = AppEnvironmentSettings.geDestinationEndpoint();
		String destinationRefreshToken = null;
		String destinationAccessToken = null;

		LOGGER.debug("Authentication User Access-Token: " + authenticatedUserToken);
		
		// In case when there is no currentUser, XSUAA token is fetched using VCAP client credentials and is 
		// directly used to fetch destination payload
		if(getContext().getCurrentUserObject() == null) {
			// XSUAA-Code Grant Flow
			LOGGER.info("No current user found. XSUAA token will be fetched using VCAP client");
			destinationAccessToken = requestXSUAATokenForDestination(authenticationEndpoint, destinationClientId,
					destinationClientSecret, destinationAccessToken);
		}
		else {
			LOGGER.info("Current User found - " + getContext().getCurrentUserObject());
			// User-Token Grant Flow
			LOGGER.info("Request User refresh token");
			destinationRefreshToken = requestUserRefreshTokenForDestination(authenticatedUserToken, authenticationEndpoint,
					destinationClientId, destinationRefreshToken);
	
			// Refresh-Code Grant Flow
			LOGGER.info("Request User Access token");
			destinationAccessToken = requestUserAccesTokenForDestination(authenticationEndpoint, destinationClientId,
					destinationClientSecret, destinationRefreshToken, destinationAccessToken);
		}
		
		// Get destination by name
		return getDestinationByName(destinationEndpoint, destinationAccessToken);
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ConsumeDestinationService";
	}

	// BEGIN EXTRA CODE
	private static final String ACCESS_TOKEN = "access_token";
    private static final String REFRESH_TOKEN = "refresh_token";
    private static final MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded");
	private static final String XSUAA_USER_TOKEN_MF = "SapAuthentication.ACT_GetUserToken";
	private static final ILogNode LOGGER = Core.getLogger(Constants.getLogNode_2());

    private static String extractValue(String keyName, String payload){

        try(StringReader reader = new StringReader(payload);
            JsonParser payloadParser = Json.createParser(reader)){

            while (payloadParser.hasNext()){
                final JsonParser.Event event = payloadParser.next();

                if (event == JsonParser.Event.KEY_NAME && keyName.equals(payloadParser.getString())){
                    payloadParser.next();
                    return payloadParser.getString();
                }
            }

        }

        throw new RuntimeException(keyName + " not found");
    }

    private String getUserXSUAAToken(IContext context) {
		if (!Core.getMicroflowNames().contains(XSUAA_USER_TOKEN_MF)) {
			LOGGER.warn(String.format("Unable to fetch user XSUAA token because microflow %s "
					+ "doesn't exists. Please check SapAuthentication module is included into your projects", XSUAA_USER_TOKEN_MF));
			return null;
		}
		
		if(getContext().getCurrentUserObject() == null) {
			LOGGER.warn(String.format("Unable to fetch user XSUAA token through microflow %s "
					+ "since there is no currentUser logged in.", XSUAA_USER_TOKEN_MF));
			return null;
		}

		try {
			return (String) Core.microflowCall(XSUAA_USER_TOKEN_MF).execute(context);
		} catch (Exception ex) {
			LOGGER.critical("Exception calling MF to get XSUAA user token", ex);
		}
		return null;
	}
    
    
    private String requestUserRefreshTokenForDestination(String authenticatedUserToken, String authenticationEndpoint,
			String destinationClientId, String destinationRefreshToken) {    	
		RequestBody userTokenBody = RequestBody.create(mediaType, "grant_type=user_token&client_id=" + destinationClientId + "&token_format=jwt&response_type=token");
		Request userTokenRequest = new Request.Builder()
				.url(authenticationEndpoint)
				.post(userTokenBody)
				.addHeader("Content-Type", "application/x-www-form-urlencoded")
				.addHeader("Accept", "application/json")
				.addHeader("Authorization", "Bearer " + authenticatedUserToken)
				.addHeader("Cache-Control", "no-cache")
				.build();

		try {
			

			OkHttpClient client = getHttpClient();
			Response response = client.newCall(userTokenRequest).execute();
			String payload = response.body().string();
			LOGGER.debug("User-Token Grant Response: " + payload);
			destinationRefreshToken = extractValue(REFRESH_TOKEN, payload);

		} catch (IOException e) {
			LOGGER.error("Failed User-Token Grant Flow");
			throw new MendixRuntimeException(e);
		}
		return destinationRefreshToken;
	}

   
    private OkHttpClient getHttpClient() {
    	OkHttpClient client = new OkHttpClient.Builder()
			    .addNetworkInterceptor(new HttpLoggingInterceptor())
			    .build();
    	return client;
	}

	private String requestUserAccesTokenForDestination(String authenticationEndpoint, String destinationClientId,
			String destinationClientSecret, String destinationRefreshToken, String destinationAccessToken) {
		String destinationEncodedCredentials = new String(Base64.getEncoder().encode((destinationClientId + ':' + destinationClientSecret).getBytes()));
		RequestBody refreshTokenBody = RequestBody.create(mediaType, "grant_type=refresh_token&refresh_token=" + destinationRefreshToken);
		Request refreshTokenRequest = new Request.Builder()
				.url(authenticationEndpoint)
				.post(refreshTokenBody)
				.addHeader("Content-Type", "application/x-www-form-urlencoded")
				.addHeader("Authorization", "Basic " + destinationEncodedCredentials)
				.addHeader("Cache-Control", "no-cache")
				.build();

		try {
			OkHttpClient client = getHttpClient();
			Response response = client.newCall(refreshTokenRequest).execute();
			String payload = response.body().string();
			LOGGER.debug("Refresh-Code Grant Response: " + payload);
			destinationAccessToken = extractValue(ACCESS_TOKEN, payload);
		} catch (IOException e) {
			LOGGER.error("Failed Refresh-Token Grant Flow");
			throw new MendixRuntimeException(e);
		}
		return destinationAccessToken;
	}
    
    // Fetching XSUAA token using client id and client secret as basic authorization 
    private String requestXSUAATokenForDestination(String authenticationEndpoint, String destinationClientId,
			String destinationClientSecret, String destinationAccessToken) {
		String destinationEncodedCredentials = new String(Base64.getEncoder().encode((destinationClientId + ':' + destinationClientSecret).getBytes()));
		RequestBody refreshTokenBody = RequestBody.create(mediaType, "grant_type=client_credentials&client_id=" + destinationClientId);
		Request refreshTokenRequest = new Request.Builder()
				.url(authenticationEndpoint)
				.post(refreshTokenBody)
				.addHeader("Content-Type", "application/x-www-form-urlencoded")
				.addHeader("Authorization", "Basic " + destinationEncodedCredentials)
				.addHeader("Cache-Control", "no-cache")
				.build();

		try {
			OkHttpClient client = getHttpClient();
			Response response = client.newCall(refreshTokenRequest).execute();
			String payload = response.body().string();
			LOGGER.debug("XSUAA-Code Grant Response: " + payload);
			destinationAccessToken =  extractValue(ACCESS_TOKEN, payload);
		} catch (IOException e) {
			LOGGER.error("Failed XSUAA-Token Grant Flow");
			throw new MendixRuntimeException(e);
		}
		return destinationAccessToken;
	}

    private String getDestinationByName(String destinationEndpoint, String destinationAccessToken) {
		Request getDestinationRequest = new Request.Builder()
				.url(destinationEndpoint + "/destination-configuration/v1/destinations/" + this.Name)
				.get()
				.addHeader("Cache-Control", "no-cache")
				.addHeader("Authorization", "Bearer " + destinationAccessToken)
				.build();

		try {
			OkHttpClient client = getHttpClient();
			Response response = client.newCall(getDestinationRequest).execute();
			String payload = response.body().string();
			LOGGER.debug("Get Destination: " + payload);
			return payload;
		} catch (IOException e) {
			LOGGER.error("Failed Getting Destination");
			throw new MendixRuntimeException(e);
		}
	}

	// END EXTRA CODE
}
