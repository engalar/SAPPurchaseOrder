// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package sapodataconnector.actions;

import java.net.URI;
import org.apache.http.Consts;
import org.apache.http.HttpEntity;
import org.apache.http.client.entity.EntityBuilder;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.ContentType;
import org.apache.http.impl.client.CloseableHttpClient;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.thirdparty.org.json.JSONObject;
import com.mendix.webui.CustomJavaAction;
import sapodataconnector.proxies.constants.Constants;
import sapodataconnector.utils.ExpectedHttpResultOptional;
import sapodataconnector.utils.JsonSerializer;
import sapodataconnector.utils.ODataClientBuilder;
import sapodataconnector.utils.ODataRequestBuilder;
import sapodataconnector.utils.ODataResponseHandler;

public class Update extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __odataObject;
	private sapodataconnector.proxies.OdataObject odataObject;
	private IMendixObject __destination;
	private sapodataconnector.proxies.Destination destination;
	private IMendixObject __requestParameters;
	private sapodataconnector.proxies.RequestParams requestParameters;

	public Update(IContext context, IMendixObject odataObject, IMendixObject destination, IMendixObject requestParameters)
	{
		super(context);
		this.__odataObject = odataObject;
		this.__destination = destination;
		this.__requestParameters = requestParameters;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.odataObject = this.__odataObject == null ? null : sapodataconnector.proxies.OdataObject.initialize(getContext(), __odataObject);

		this.destination = this.__destination == null ? null : sapodataconnector.proxies.Destination.initialize(getContext(), __destination);

		this.requestParameters = this.__requestParameters == null ? null : sapodataconnector.proxies.RequestParams.initialize(getContext(), __requestParameters);

		// BEGIN USER CODE
		final JSONObject json = JsonSerializer.writeMendixObjectToJson(getContext(), __odataObject, false);
		final String jsonStr = json.toString();

		if(LOGGER.isDebugEnabled()) {
			LOGGER.debug(new StringBuilder(getContext().getSession().getId().toString())
					.append("|UPDATE|json: ")
					.append(jsonStr)
					.toString());
		}

		if(destination != null) {
			LOGGER.info("Update:: Destination found, update object");
			URI meta_objectURI = new URI(odataObject.getmeta_objectURI());
			URI destinationURI = new URI(destination.getUrl());
			String uriStr = odataObject.getmeta_objectURI();
			if(destinationURI.getHost().equals(meta_objectURI.getHost())){
				uriStr = meta_objectURI.getPath();
				if(meta_objectURI.getPath().startsWith(destinationURI.getPath())){
					uriStr = uriStr.substring(destinationURI.getPath().length());
				}
			}
			LOGGER.debug(new StringBuilder(getContext().getSession().getId().toString())
					.append("Updated query: ")
					.append(uriStr)
					.toString());
			
			final HttpPut httpPut = ODataRequestBuilder.builder()
					.put(destination, uriStr)
					.setContext(getContext())
					.setRequestHeader(requestParameters)
					.withIfMatchEtagFrom(odataObject)
					.build();

			httpPut.setEntity(createEntityForRequest(jsonStr));

			try (final CloseableHttpClient httpclient = ODataClientBuilder.builder()
					.setContext(getContext())
					.setRequestParameters(requestParameters)
					.setDestination(destination)
					.build()){

				httpclient.execute(httpPut, new ODataResponseHandler("UPDATE", LOGGER, getContext(),
						ExpectedHttpResultOptional.ofNullable(requestParameters).orDefault(204).getExpectedHttpResult()));
			}
		}
		else {
			LOGGER.info("Update:: Destination not  found, update object");
			final HttpPut httpPut = ODataRequestBuilder.builder()
					.put(odataObject.getmeta_objectURI())
					.setContext(getContext())
					.setRequestHeader(requestParameters)
					.withIfMatchEtagFrom(odataObject)
					.build();

			httpPut.setEntity(createEntityForRequest(jsonStr));

			try (final CloseableHttpClient httpclient = ODataClientBuilder.builder()
					.setContext(getContext())
					.setRequestParameters(requestParameters)
					.build()){

				httpclient.execute(httpPut, new ODataResponseHandler("UPDATE", LOGGER, getContext(),
						ExpectedHttpResultOptional.ofNullable(requestParameters).orDefault(204).getExpectedHttpResult()));
			}
		}

		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Update";
	}

	// BEGIN EXTRA CODE
	private static final ILogNode LOGGER = Core.getLogger(Constants.getLogNode());
	
	private HttpEntity createEntityForRequest(final String jsonStr) {
		return EntityBuilder.create()
				.setText(jsonStr)
				.setContentType(ContentType.APPLICATION_JSON.withCharset(Consts.UTF_8))
				.build();
	}
	// END EXTRA CODE
}
