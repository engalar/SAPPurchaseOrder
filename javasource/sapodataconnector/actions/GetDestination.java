// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package sapodataconnector.actions;

import java.lang.reflect.Field;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import sapodataconnector.proxies.Destination;
import sapodataconnector.proxies.constants.Constants;
import sapodataconnector.proxies.microflows.Microflows;

public class GetDestination extends CustomJavaAction<IMendixObject>
{
	private java.lang.String Destination;

	public GetDestination(IContext context, java.lang.String Destination)
	{
		super(context);
		this.Destination = Destination;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		if (!Core.getMicroflowNames().contains(GET_DESTINATION_MF)) {
			LOGGER.warn(String.format("Unable to fetch destination because microflow %s "
					+ "doesn't exists. Please check SAPODataConnector module is included into your projects", GET_DESTINATION_MF));
			return null;
		}

		/** 
		 * Getting Destination field value using reflection because
		 * generated parameter name are different for Mendix 7 and Mendix 8
		 * https://docs.mendix.com/refguide/moving-from-7-to-8#8-java-code-generation
		 */
		String strDestination = null;
		Field[] fields = this.getClass().getDeclaredFields();
		for(Field field: fields){
			if( field.getType().equals(String.class) ){
				String strTemp = (String) field.get(this);
				if( !strTemp.equals(GET_DESTINATION_MF) ){
					strDestination = strTemp;
					LOGGER.info("Destination found:: "+strDestination);
					break;
				}
			}
		}

		Destination destination = Microflows.getDestinationInternal(getContext(), strDestination);
		if(null != destination) {
			LOGGER.info("GetDestination action successfully completed");
		}
		else {
			LOGGER.warn("GetDestination action failed");
		}
		return destination.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "GetDestination";
	}

	// BEGIN EXTRA CODE
	private static final ILogNode LOGGER = Core.getLogger(Constants.getLogNode_2());
	private static final String GET_DESTINATION_MF = "SAPODataConnector.GetDestinationInternal";
	// END EXTRA CODE
}
