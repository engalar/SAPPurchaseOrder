// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package odataquerybuilder.actions;

import java.util.Collection;
import java.util.List;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import odataquerybuilder.proxies.Operator;
import odataquerybuilder.proxies.OptionType;
import odataquerybuilder.proxies.QueryOption;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaAssociation;

/**
 * Used to JOIN.two queries to make a compound query
 * For example:
 * JoinType = OR
 * JoinType = AND
 */
public class AddJoin extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __OData;
	private odataquerybuilder.proxies.OData OData;
	private odataquerybuilder.proxies.AndOrFilter JoinType;

	public AddJoin(IContext context, IMendixObject OData, java.lang.String JoinType)
	{
		super(context);
		this.__OData = OData;
		this.JoinType = JoinType == null ? null : odataquerybuilder.proxies.AndOrFilter.valueOf(JoinType);
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.OData = this.__OData == null ? null : odataquerybuilder.proxies.OData.initialize(getContext(), __OData);

		// BEGIN USER CODE
		Collection<? extends IMetaAssociation> childAssociations = OData.getMendixObject().getMetaObject().getMetaAssociationsChild();
		for(IMetaAssociation childAssociation: childAssociations ){
			List<IMendixObject> queryParams = Core.retrieveByPath(this.getContext(), OData.getMendixObject(), childAssociation.getName());
			if(!queryParams.isEmpty()){
				IMendixObject lastQueryParam = queryParams.get(queryParams.size()-1);
				if(lastQueryParam.getType().equals(QueryOption.getType())){
					QueryOption option = QueryOption.initialize(this.getContext(), lastQueryParam);
					if(option.getOptionType() == OptionType.filter){
						//only add a join if the last option was a filter otherwise do not add.
						Operator join = new Operator(this.getContext());
						join.setOperatorType(JoinType);
						join.setQueryParam_OData(OData);
						join.setOrder(OData.getNextOrderNumber());
						OData.setNextOrderNumber(OData.getNextOrderNumber()+1);
						OData.commit();
						return true;
					}
				}
			}
			
		}

		return false;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "AddJoin";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
